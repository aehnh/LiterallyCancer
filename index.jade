//
   Created by q on 2017-01-07.
doctype html
html
    head
        title Literally Canvas
        link(href='/static/css/literallycanvas.css', rel='stylesheet')
        meta(charset='UTF-8')
        meta(name='viewport', content='width=device-width, user-scalable=no')
        style(type='text/css').
            *{
                margin: 0;
                padding: 0;
            }
            .fs-container {
                position: absolute;
                width: 100%;
                height: 100%;
                overflow: hidden;
            }
            .literally {
                width: 100%;
                height: 100%;
                position: relative;
            }
            #lc {
                width: 100%;
                height: 100%;
            }

            .fab {
                background: #1C9E00;
                border-radius: 50%;
                text-align: center;
                color: #FFF;
                position: fixed;
                right: 70px;
                font-size: 25px;
                padding: 9px 2.5px 6px;
                -webkit-filter: drop-shadow(0 1px 3px rgba(0, 0, 0, .42));
            }

            .fab span {
                vertical-align: middle;
            }

            .fab.child {
                width: 53.666667px;
                height: 37.666667px;
                display: none;
                opacity: 0;
                background: transparent;
                border-radius: 0%;
                right: 63px;
                padding: 0;
            }

            .fab img {
                border-radius: 50%;
            }

            .backdrop {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: #FAFAFA;
                opacity: 0.7;
                display: none;
            }
    body
        .fs-container
            #lc
        .backdrop
        .fab.child(data-subitem='1')
            a(href='tel:+121212121')
                img(alt='', src='images/smile.jpg')
        .fab.child(data-subitem='2')
            a(href='tel:+1212121212')
                img(alt='', src='about/smile.jpg')
        #masterfab.fab.visible-xs.float-phone
            i.fa.icon-phone.soft-white
        // you really ought to include react-dom, but for react 0.14 you don't strictly have to.
        script(src='/static/js/react-0.14.3.js')
        script(src='/static/js/literallycanvas.js')
        script(src='https://cdn.socket.io/socket.io-1.4.5.js')
        script(type='text/javascript').
            var socket = io();
            window.history.pushState('', '', '/#{id}');
            socket.on('connect', function () {
                socket.emit('joinRoom', '#{id}');
            });
            var lc = LC.init(document.getElementById("lc"), {
                imageURLPrefix: '/static/img',
                toolbarPosition: 'bottom',
                defaultStrokeWidth: 2,
                strokeWidths: [1, 2, 3, 5, 30],
                imageSize: {width: null, height: null}
            });
            if (#{isCreation})
                console.log('id : #{id}');
            else
                //console.log('canvas : #{snapshotJSON}');
                lc.loadSnapshot(!{snapshotJSON});
            lc.on('drawingChange', function() {
                socket.emit('json snapshot', {
                    id: '#{id}',
                    snapshot: JSON.stringify(lc.getSnapshot())
                });
            });
            lc.on('shapeSave', function (args) {
                console.log(JSON.stringify(args));
                console.log(LC.shapeToJSON(args.shape));
                console.log(JSON.stringify(args.previousShapeId));
                socket.emit('json shape', {
                    curr: LC.shapeToJSON(args.shape),
                    prev: args.previousShapeId,
                    id: '#{id}',
                    snapshot: JSON.stringify(lc.getSnapshot())
                });
            });
            lc.on('clear', function () {
                socket.emit('command', {comm: 'clear', id: '#{id}'});
            });
            lc.on('undo', function () {
                socket.emit('command', {comm: 'undo', id: '#{id}'});
            });
            lc.on('redo', function () {
                socket.emit('command', {comm: 'redo', id: '#{id}'});
            });
            lc.on('backgroundColorChange', function (newColor) {
                //console.log(JSON.stringify(newColor));
                //socket.emit('background color', {color: newColor, id: '#{id}'});
            });
            lc.on('backgroundColorChange2', function (newColor) {
                console.log(JSON.stringify(newColor));
                socket.emit('background color', {color: newColor, id: '#{id}'});
            });
            lc.on('pointerup', function(position) {
                console.log("up");
            });
            /* socket.on('json snapshot', function (msg) {
                console.log(msg);
                lc.loadSnapshot(JSON.parse(msg));
                //var canvas = LC.renderShapesToCanvas(LC.snapshotToShapes(msg), {x: 0, y: 0, width: 'infinite', height: 'infinite'}, canvas = lc);
                //lc = canvas;
            }); */
            socket.on('json shape', function (args) {
                console.log(LC.JSONToShape(args.curr));
                console.log(args.prev);
                lc.saveShape(LC.JSONToShape(args.curr), false, args.prev);
            });
            socket.on('command', function (comm) {
                if (comm == 'clear') {
                    console.log('clear');
                    lc.clear(false);
                } else if (comm == 'undo') {
                    console.log('undo');
                    lc.undo(false);
                } else if (comm == 'redo') {
                    console.log('redo');
                    lc.redo(false);
                }
            });
            socket.on('background color', function(color) {
                console.log(color);
                lc.setColor('background', color, false);
            });