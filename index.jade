//
   Created by q on 2017-01-07.
doctype html
html
    head
        title Literally Canvas
        link(href='/static/css/literallycanvas.css', rel='stylesheet')
        meta(charset='UTF-8')
        meta(name='viewport', content='width=device-width, user-scalable=no')
        style(type='text/css').
            *{
                margin: 0;
                padding: 0;
                font-family: Arial;
            }

            .fs-container {
                display: inline-block;
                position: absolute;
                width: 100%;
                height: 100%;
                overflow: hidden;
            }
            .literally {
                width: 100%;
                height: 100%;
                position: relative;
            }
            #lc {
                width: 100%;
                height: 100%;
            }

            #masterfab {
                background: #e6e6e6;
                color: #ffffff;
                display: none;
                cursor: pointer;
                text-decoration:none;
            }

            .fab {
                width: 64px;
                height: 64px;
                border-radius: 50%;
                text-align: center;
                vertical-align: middle;
                line-height: 70px;
                box-shadow: 0 0 3px rgba(0, 0, 0, 0.5), 3px 3px 3px rgba(0, 0, 0, 0.25);
                position: fixed;
                bottom: calc(1 / 4 * 3 * 64px);
                right: calc(340px + 1 / 4 * 3 * 64px);
                font-size: 24px;
                display: inline-block;
                cursor: default;
            }

            .chat-sidebar {
                display: inline-block;
                width: 340px;
                position: fixed;
                height: 100%;
                right: 0;
                top: 0;
                padding-top: 10px;
                padding-bottom: 10px;
                background-color: #e6e6e6;
                border-left: 1px solid #d5d7dc;
            }

            #chat-window-header {
                position: absolute;
                top: 0;
                width: 100%;
                height: 50px;
                background-color: #555555;
            }

            #chat-window-header p {
                text-align: center;
                vertical-align: middle;
                line-height: 50px;
                color: #ffffff;
            }

            #chat-window-content-wrapper {
                position: absolute;
                top: 50px;
                width: 100%;
                height: calc(100% - 100px - 50px);
                margin: 0;
                padding: 0;
                list-style-type: none;
                overflow: auto;
            }

            textarea.chat-window-text-box {
                border-color: #d5d7dc;
                border-image: none;
                border-radius: 0;
                border-style: solid;
                border-width: 1px 0 0;
                box-sizing: border-box;
                font-size: 16px;
                line-height: 1.2em;
                margin: 0;
                overflow: hidden;
                padding: 3px;
                resize: none;
                width: 100%;
                word-wrap: break-word;
                height: 50px;
            }

            textarea.chat-window-text-box:focus {
                outline: none;
            }

            .chat-window-text-box-wrapper {
                position: absolute;
                bottom: 50px;
                width: 100%;
                margin: 0;
                padding: 0;
                height: 50px;
            }

            ::-webkit-scrollbar {
                display: none;
            }

            #chat-window-content-wrapper li {
                padding: 5px 10px;
                word-break: break-all;
            }

            #chat-window-content-wrapper li:nth-child(odd) {
                background: #dddddd;
            }

    body
        .fs-container
            #lc
        .chat-sidebar(id='shell', style='display: none;')
            #chat-window-header
                p(id='usernamern')
            #chat-window-content-wrapper
            .chat-window-text-box-wrapper
                textarea.chat-window-text-box(id='only', rows='1', onkeydown="maybeSubmit();", onkeyup="maybeClear();")
        a#masterfab(download='canvas', style="").fab
            img(src='/static/img/download.png')

        // you really ought to include react-dom, but for react 0.14 you don't strictly have to.
        script(src='http://code.jquery.com/jquery-3.1.1.js')
        script(src='/static/js/react-0.14.3.js')
        script(src='/static/js/literallycanvas.js')
        script(src='https://cdn.socket.io/socket.io-1.4.5.js')
        script(type='text/javascript').
            // declare some variables
            var canvasTitle;
            var tempUserName;
            var adjectives = ['Agreeable','Brave', 'Calm', 'Delightful', 'Eager', 'Faithful', 'Gentle', 'Happy', 'Intelligent', 'Jolly', 'Kind', 'Lively', 'Mighty', 'Nice', 'Obedient', 'Proud', 'Quick', 'Relieved', 'Satisfying', 'Thankful', 'Useful', 'Victorious', 'Witty', 'Xenial', 'Youthful', 'Zealous'];
            var champions = ['Ana', 'Bastion', 'D.Va', 'Genzi', 'Hanzo', 'Junkrat', 'Lucio', 'Mccree', 'Mei', 'Mercy', 'Reaper', 'Reinhardt', 'Roadhog', 'Torbjorn', 'Tracer', 'Windowmaker', 'Winston', 'Soldier: 76', 'Sombra', 'Symmetra', 'Zarya', 'Zenyata'];

            window.onload = function () {
                // set title
                if (#{isCreation}) {
                    canvasTitle = prompt("Enter the title of canvas", "My canvas");
                    if(canvasTitle != null) {
                        document.title = canvasTitle;
                        socket.emit('set title', {
                            id: '#{id}',
                            title: canvasTitle
                        });
                    } else {
                        document.title = "My canvas";
                        socket.emit('set title', {
                            id: '#{id}',
                            title: "My canvas"
                        });
                    }
                }
                // show chatting sidebar
                $('#shell').show();
                $('#masterfab').show();
                tempUserName = adjectives[Math.floor((Math.random() * adjectives.length))]+ ' ' + champions[Math.floor((Math.random() * champions.length))];
                document.getElementById('usernamern').innerHTML = tempUserName;
                if (lc.getImage() != null) {
                    document.getElementById("masterfab").style.background = '#ea4335';
                }
            };


            function maybeSubmit() {
                var key = window.event.keyCode;
                if (key === 13) {
                    var val = document.getElementById('only').value;
                    if(val != '') {
                        console.log(val);
                        socket.emit('chat message', {id: '#{id}', message: tempUserName + ' : ' + val});
                    }
                }
            }
            function maybeClear() {
                var key = window.event.keyCode;
                if (key === 13) {
                    document.getElementById('only').value = '';
                }
            }

            // url change
            window.history.pushState('', '', '/#{id}');

            // socket initialization and room join
            var socket = io();
            socket.on('connect', function () {
                socket.emit('joinRoom', '#{id}');
            });

            // literallyCanvas initialization
            var lc = LC.init(document.getElementById("lc"), {
                imageURLPrefix: '/static/img',
                toolbarPosition: 'bottom',
                defaultStrokeWidth: 2,
                strokeWidths: [1, 2, 3, 5, 30],
                imageSize: {width: null, height: null}
            });
            if (#{isCreation}) {
                console.log('id : #{id}');
                // set title
            }
            else {
                canvasTitle = '#{title}';
                document.title = canvasTitle;
                lc.loadSnapshot(!{snapshotJSON});
            }

            // literallyCanvas event handlers
            lc.on('drawingChange', function() {
                if (lc.getImage() == null) {

                    document.getElementById("masterfab").style.background = '#e6e6e6';
                } else {
                    document.getElementById("masterfab").style.background = '#ea4335';
                }
                socket.emit('json snapshot', {
                    id: '#{id}',
                    snapshot: JSON.stringify(lc.getSnapshot())
                });
            });
            lc.on('shapeSave', function (args) {
                console.log(JSON.stringify(args));
                console.log(LC.shapeToJSON(args.shape));
                console.log(JSON.stringify(args.previousShapeId));
                socket.emit('json shape', {
                    curr: LC.shapeToJSON(args.shape),
                    prev: args.previousShapeId,
                    id: '#{id}',
                    snapshot: JSON.stringify(lc.getSnapshot())
                });
            });
            lc.on('clear', function () {
                socket.emit('command', {comm: 'clear', id: '#{id}'});
            });
            lc.on('undo', function () {
                socket.emit('command', {comm: 'undo', id: '#{id}'});
            });
            lc.on('redo', function () {
                socket.emit('command', {comm: 'redo', id: '#{id}'});
            });
            lc.on('backgroundColorChange2', function (newColor) {
                console.log(JSON.stringify(newColor));
                socket.emit('background color', {color: newColor, id: '#{id}'});
            });

            // socket event handlers
            socket.on('chat message', function(args) {
                console.log(args.message);
                var element = '<li>' + args.message + '</li>';
                var cached = $('#chat-window-content-wrapper');
                cached.append(element);
                cached.scrollTop(cached[0].scrollHeight);
            });
            socket.on('json shape', function (args) {
                console.log(LC.JSONToShape(args.curr));
                console.log(args.prev);
                lc.saveShape(LC.JSONToShape(args.curr), false, args.prev);
            });
            socket.on('command', function (comm) {
                if (comm == 'clear') {
                    console.log('clear');
                    lc.clear(false);
                } else if (comm == 'undo') {
                    console.log('undo');
                    lc.undo(false);
                } else if (comm == 'redo') {
                    console.log('redo');
                    lc.redo(false);
                }
            });
            socket.on('background color', function(color) {
                console.log(color);
                lc.setColor('background', color, false);
            });

            $('#chat-window-header').click(function(e) {
                var prompted = prompt("Change username", tempUserName);
                if(prompted != null) {
                    tempUserName = prompted;
                    console.log(document.getElementsByTagName('p').value);
                    document.getElementById('usernamern').innerHTML = tempUserName;
                }
            });
            // floating action button click listener
            var masterfabulous = $('#masterfab');
            masterfabulous.click(function (e) {
                if(lc.getImage() != null) {
                    document.getElementById("masterfab").href = lc.getImage().toDataURL();
                }
            });
            masterfabulous.hover(
                function () {
                    if(lc.getImage() != null) {
                        document.getElementById("masterfab").style.boxShadow = '0 0 3px rgba(0, 0, 0, 0.5), 3px 3px 3px rgba(0, 0, 0, 0.5)';
                    }
                }, function () {
                    document.getElementById("masterfab").style.boxShadow = '0 0 3px rgba(0, 0, 0, 0.5), 3px 3px 3px rgba(0, 0, 0, 0.25)';
                }
            );
            /*
            $('#lc').ready(function () {
                if (#{isCreation}) {
                    canvasTitle = prompt("Enter the title of canvas", "My canvas");
                    document.title = canvasTitle;
                    socket.emit('set title', {
                        id: '#{id}',
                        title: canvasTitle
                    });
                }
            });
            */
