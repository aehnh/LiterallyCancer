//
   Created by q on 2017-01-07.
doctype html
html
    head
        title Literally Canvas
        link(href='/static/css/literallycanvas.css', rel='stylesheet')
        meta(charset='UTF-8')
        meta(name='viewport', content='width=device-width, user-scalable=no')
        style(type='text/css').
            *{
                margin: 0;
                padding: 0;
            }
            .fs-container {
                position: absolute;
                width: 100%;
                height: 100%;
                overflow: hidden;
            }
            .literally {
                width: 100%;
                height: 100%;
                position: relative;
            }
            #lc {
                width: 100%;
                height: 100%;
            }
    body
        .fs-container
            #lc
        // you really ought to include react-dom, but for react 0.14 you don't strictly have to.
        script(src='/static/js/react-0.14.3.js')
        script(src='/static/js/literallycanvas.js')
        script(src='https://cdn.socket.io/socket.io-1.4.5.js')
        script(type='text/javascript').
            var socket = io();
            var lc = LC.init(document.getElementById("lc"), {
              imageURLPrefix: '/static/img',
              toolbarPosition: 'bottom',
              defaultStrokeWidth: 2,
              strokeWidths: [1, 2, 3, 5, 30],
              imageSize: {width: null, height: null}
            });
            if (#{isCreation})
              console.log('id : #{id}');
            else
              //console.log('canvas : #{snapshotJSON}');
              lc.loadSnapshot(!{snapshotJSON});
            lc.on('shapeSave', function (args) {
                console.log(JSON.stringify(args));
                console.log(LC.shapeToJSON(args.shape));
                console.log(JSON.stringify(args.previousShapeId));
                socket.emit('json shape', {
                  curr: LC.shapeToJSON(args.shape),
                  prev: args.previousShapeId,
                  id: '#{id}',
                  snapshot: JSON.stringify(lc.getSnapshot())
                });
            });
            lc.on('clear', function () {
                socket.emit('command', 'clear');
            });
            lc.on('undo', function () {
                socket.emit('command', 'undo');
            });
            lc.on('redo', function () {
                socket.emit('command', 'redo');
            });
            socket.on('json snapshot', function (msg) {
                console.log(msg);
                lc.loadSnapshot(JSON.parse(msg));
                //var canvas = LC.renderShapesToCanvas(LC.snapshotToShapes(msg), {x: 0, y: 0, width: 'infinite', height: 'infinite'}, canvas = lc);
                //lc = canvas;
            });
            socket.on('json shape', function (args) {
                console.log(LC.JSONToShape(args.curr));
                console.log(args.prev);
                lc.saveShape(LC.JSONToShape(args.curr), false, args.prev);
            });
            socket.on('command', function (comm) {
                if (comm == 'clear') {
                    console.log('clear');
                    lc.clear(false);
                } else if (comm == 'undo') {
                    console.log('undo');
                    unsubscribe();
                    lc.undo();
                    const unsubscribe = lc.on('undo', function () {
                        socket.emit('command', 'undo');
                    });
                } else if (comm == 'redo') {
                    console.log('redo');
                    lc.redo(false);
                }
            });

