#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled2:server');
var http = require('http');
var Canvas = require('../models/canvas');
var mongoose = require('mongoose');

// connect to mongoDB server
var db = mongoose.connection;
db.on('error', console.error);
db.once('open', function () {
  //connected to mongoDB server
  console.log('connected to mongoDB server');
});

mongoose.connect('mongodb://localhost/canvas');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);
io.on('connection', function (socket) {
    console.log('a user connected');
    // response
    socket.on('json snapshot', function (msg) {
        console.log(msg);
        socket.broadcast.emit('json snapshot', msg);
    });
    socket.on('json shape', function (args) {
        console.log(args);
        Canvas.findByIdAndUpdate(args.id, {snapshotJSON: args.snapshot}, function (err, canvas) {
            if (err)  {
                console.error(err);
            } else if (!canvas) {
                console.error('invalid canvas id');
            } else {
                console.log(canvas);
            }
        });
        socket.broadcast.emit('json shape', args);
    });
    socket.on('command', function (comm) {
        console.log(comm);
        socket.broadcast.emit('command', comm);
    });
    socket.on('background color', function (color) {
        console.log(color);
        socket.broadcast.emit('background color', color);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(app.get('port'));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
